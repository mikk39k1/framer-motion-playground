"use client";

import { useEffect, useRef } from "react";
import MiddleSummaryCard from "./MiddleSummaryCard";
import SummaryCard from "./SummaryCard";
import { motion } from "framer-motion";

type Path = {
  startX: number;
  startY: number;
  endX: number;
  endY: number;
  direction: string;
  imgSrc: string;
};

const AutoGeneratedSummaryShowcase = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const bubbleImages = [
    { src: "/images/chat-bubble 1.png" },
    { src: "/images/chat-bubble (1) 1.png" },
    { src: "/images/chat-bubble (2) 1.png" },
    { src: "/images/chat-bubble (3) 1.png" },
  ]

  useEffect(() => {
    const canvas = canvasRef.current;
    const context = canvas?.getContext("2d");

    if (!canvas || !context) return;
    canvas.width = 900;
    canvas.height = 800;

    context.clearRect(0, 0, canvas.width, canvas.height);

    context.lineWidth = 3;
    context.setLineDash([10, 10]);

    const createGradient = (
      context: CanvasRenderingContext2D,
      startX: number,
      startY: number,
      endX: number,
      endY: number
    ) => {
      const gradient = context.createLinearGradient(startX, startY, endX, endY);
      gradient.addColorStop(0, "#b0b0b0");
      gradient.addColorStop(0.6, "#b0b0b0");
      gradient.addColorStop(1, "#8000ff");
      return gradient;
    };

    const drawHalfDiamond = (
      context: CanvasRenderingContext2D,
      x: number,
      y: number,
      direction: string
    ) => {
      const size = 10; // Size of the half-diamond
      context.beginPath();
      switch (direction) {
        // Direction of the Half Diamond
        case "top-left":
          context.moveTo(x, y);
          context.lineTo(x + size, y + size);
          context.lineTo(x - size, y + size);
          break;
        case "top-right":
          context.moveTo(x, y);
          context.lineTo(x + size, y + size);
          context.lineTo(x - size, y + size);
          break;
        case "bottom-left":
          context.moveTo(x, y);
          context.lineTo(x + size, y - size);
          context.lineTo(x - size, y - size);
          break;
        case "bottom-right":
          context.moveTo(x, y);
          context.lineTo(x - size, y - size);
          context.lineTo(x + size, y - size);
          break;
        default:
          break;
      }
      context.closePath();
      context.fillStyle = "#8000ff";
      context.fill();
    };

    const drawLineWithBend = (
      startX: number,
      startY: number,
      endX: number,
      endY: number,
      direction: string,
      radius: number = 20
    ) => {
      context.strokeStyle = createGradient(context, startX, startY, endX, endY);
      context.beginPath();
      context.moveTo(startX, startY);
      let finalY = endY;
      switch (direction) {
        case "top-left":
          context.lineTo(endX - radius, startY);
          context.arcTo(endX, startY, endX, startY + radius, radius);
          finalY = startY + radius;
          break;
        case "top-right":
          context.lineTo(endX + radius, startY);
          context.arcTo(endX, startY, endX, startY + radius, radius);
          finalY = startY + radius;
          break;
        case "bottom-left":
          context.lineTo(endX - radius, startY);
          context.arcTo(endX, startY, endX, startY - radius, radius);
          finalY = startY - radius;
          break;
        case "bottom-right":
          context.lineTo(endX + radius, startY);
          context.arcTo(endX, startY, endX, startY - radius, radius);
          finalY = startY - radius;
          break;
        default:
          break;
      }
      context.lineTo(endX, endY);
      context.stroke();

      // Draw half-diamond at the end of the line
      drawHalfDiamond(context, endX, endY, direction);
    };

    // Positions for SummaryCards and MiddleSummaryCard
    const topLeftCard = { x: 100, y: 50, width: 240, height: 200 };
    const topRightCard = { x: 600, y: 50, width: 160, height: 200 };
    const bottomLeftCard = { x: 100, y: 670, width: 240, height: 200 };
    const bottomRightCard = { x: 600, y: 670, width: 160, height: 200 };
    const middleCard = { x: 430, y: 290, width: 45, height: 340 }; // Line Position on Center Card

    const middleTopY = middleCard.y;
    const middleBottomY = middleCard.y + middleCard.height;

    // Draw lines from each card to middle card with bends
    drawLineWithBend(
      topLeftCard.x + topLeftCard.width / 2,
      topLeftCard.y + topLeftCard.height / 2,
      middleCard.x,
      middleTopY,
      "top-left"
    );

    drawLineWithBend(
      topRightCard.x + topRightCard.width / 2,
      topRightCard.y + topRightCard.height / 2,
      middleCard.x + middleCard.width,
      middleTopY,
      "top-right"
    );

    drawLineWithBend(
      bottomLeftCard.x + bottomLeftCard.width / 2,
      bottomLeftCard.y + bottomLeftCard.height / 2,
      middleCard.x,
      middleBottomY,
      "bottom-left"
    );

    drawLineWithBend(
      bottomRightCard.x + bottomRightCard.width / 2,
      bottomRightCard.y + bottomRightCard.height / 2,
      middleCard.x + middleCard.width,
      middleBottomY,
      "bottom-right"
    );
  }, []);

  // Define the paths
  const paths = [
    { startX: 220, startY: 150, endX: 430, endY: 290, direction: "top-left", imgSrc: bubbleImages[0].src },
    { startX: 680, startY: 150, endX: 475, endY: 290, direction: "top-right", imgSrc: bubbleImages[1].src },
    { startX: 220, startY: 770, endX: 430, endY: 630, direction: "bottom-left", imgSrc: bubbleImages[2].src },
    { startX: 680, startY: 770, endX: 475, endY: 630, direction: "bottom-right", imgSrc: bubbleImages[3].src },
  ];

  const createPath = (path: Path) => {
    // Function to generate SVG path data based on the direction and coordinates
    const { startX, startY, endX, endY, direction } = path;
    let midX, midY, finalPath;
    switch (direction) {
      case "top-left":
        midX = endX - 20;
        midY = startY + 20;
        finalPath = `M${startX},${startY} L${midX},${startY} Q${endX},${startY} ${endX},${midY} L${endX},${endY}`;
        break;
      case "top-right":
        midX = endX + 20;
        midY = startY + 20;
        finalPath = `M${startX},${startY} L${midX},${startY} Q${endX},${startY} ${endX},${midY} L${endX},${endY}`;
        break;
      case "bottom-left":
        midX = endX - 20;
        midY = startY - 20;
        finalPath = `M${startX},${startY} L${midX},${startY} Q${endX},${startY} ${endX},${midY} L${endX},${endY}`;
        break;
      case "bottom-right":
        midX = endX + 20;
        midY = startY - 20;
        finalPath = `M${startX},${startY} L${midX},${startY} Q${endX},${startY} ${endX},${midY} L${endX},${endY}`;
        break;
      default:
        break;
    }
    return finalPath;
  };

  const bubblePaths = paths.map(createPath);

  return (
    <div className="relative w-[900px] h-[800px] flex flex-col justify-between">
      <canvas ref={canvasRef} className="absolute top-0 left-0 pointer-events-none" />
      <div className="flex justify-between">
        <SummaryCard cardProfileImg="/images/profile.png" />
        <SummaryCard cardProfileImg="/images/profile.png" />
      </div>
      <div className="flex justify-center">
        <MiddleSummaryCard />
      </div>
      <div className="flex justify-between">
        <SummaryCard cardProfileImg="/images/profile.png" />
        <SummaryCard cardProfileImg="/images/profile.png" />
      </div>
      <div>
        <svg width="0" height="0">
          {bubblePaths.map((path, index) => (
            <path key={index} id={`path-${index}`} d={path} />
          ))}
        </svg>

        {paths.map((path, index) => (
          <motion.div
            key={index}
            initial={{ offsetDistance: '0%', opacity: 1}}
            animate={{ offsetDistance: '100%', opacity: [1, 1, 0]}}
            transition={{
              duration: 3,
              repeat: Infinity,
              ease: 'linear',
              delay: index * 1, // Start timer for the movement of the bubbles
              times: [0, 0.9, 1] 
            }}
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              backgroundImage: `url("${path.imgSrc}")`,
              width: '40px',
              height: '40px',
              backgroundSize: 'cover',
              offsetPath: `path('${bubblePaths[index]}')`,
              offsetRotate: '0deg',
              transform: 'rotate(0deg)'
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default AutoGeneratedSummaryShowcase;