"use client";

import { useEffect, useRef } from "react";
import MiddleSummaryCard from "./MiddleSummaryCard";
import SummaryCard from "./SummaryCard";




const AutoGeneratedSummaryShowcase = () => {

    const canvasRef = useRef<HTMLCanvasElement>(null);

    useEffect(() => {
        const canvas = canvasRef.current;
        const context = canvas?.getContext("2d");

        if (!canvas || !context) return;
        canvas.width = 1100;
        canvas.height = 1000;

        context.clearRect(0, 0, canvas.width, canvas.height);

        context.lineWidth = 3;
        context.setLineDash([10, 10]);

        const createGradient = (context: CanvasRenderingContext2D, startX: number, startY: number, endX: number, endY: number) => {
            const gradient = context.createLinearGradient(startX, startY, endX, endY);
            gradient.addColorStop(0, "#b0b0b0");
            gradient.addColorStop(0.80, "#b0b0b0");
            gradient.addColorStop(1, "#8000ff");
            return gradient;
        }

        const drawHalfDiamond = (context: CanvasRenderingContext2D, x: number, y: number, direction: string) => {
            const size = 10; // Size of the half-diamond
            context.beginPath();
            switch (direction) {
                case "top-left":
                    context.moveTo(x, y);
                    context.lineTo(x + size, y + size);
                    context.lineTo(x - size, y + size);
                    break;
                case "top-right":
                    context.moveTo(x, y);
                    context.lineTo(x + size, y + size);
                    context.lineTo(x - size, y + size);
                    break;
                case "bottom-left":
                    context.moveTo(x, y);
                    context.lineTo(x + size, y - size);
                    context.lineTo(x - size, y - size);
                    break;
                case "bottom-right":
                    context.moveTo(x, y);
                    context.lineTo(x - size, y - size);
                    context.lineTo(x + size, y - size);
                    break;
                default:
                    break;
            }
            context.closePath();
            context.fillStyle = "#8000ff";
            context.fill();
        };

        const drawLineWithBend = (startX: number, startY: number, endX: number, endY: number, direction: string, radius: number = 20) => {
            context.strokeStyle = createGradient(context, startX, startY, endX, endY);
            context.beginPath();
            context.moveTo(startX, startY);
            let finalY = endY;
            switch (direction) {
                case "top-left":
                    context.lineTo(endX - radius, startY);
                    context.arcTo(endX, startY, endX, startY + radius, radius);
                    finalY = startY + radius;
                    break;
                case "top-right":
                    context.lineTo(endX + radius, startY);
                    context.arcTo(endX, startY, endX, startY + radius, radius);
                    finalY = startY + radius;
                    break;
                case "bottom-left":
                    context.lineTo(endX - radius, startY);
                    context.arcTo(endX, startY, endX, startY - radius, radius);
                    finalY = startY - radius;
                    break;
                case "bottom-right":
                    context.lineTo(endX + radius, startY);
                    context.arcTo(endX, startY, endX, startY - radius, radius);
                    finalY = startY - radius;
                    break;
                default:
                    break;
            }
            context.lineTo(endX, endY);
            context.stroke();

            // Draw half-diamond at the end of the line
            drawHalfDiamond(context, endX, endY, direction);
        };

        // Positions for SummaryCards and MiddleSummaryCard
        const topLeftCard = { x: 50, y: 50, width: 200, height: 200 };
        const topRightCard = { x: 850, y: 50, width: 200, height: 200 };
        const bottomLeftCard = { x: 50, y: 800, width: 200, height: 200 };
        const bottomRightCard = { x: 850, y: 800, width: 200, height: 200 };
        const middleCard = { x: 500, y: 340, width: 100, height: 370 }; // Example center position of MiddleSummaryCard

        // Example Y positions on the middle card
        const middleTopY = middleCard.y;
        const middleBottomY = middleCard.y + middleCard.height;

        // Draw lines from each card to middle card with bends
        drawLineWithBend(topLeftCard.x + topLeftCard.width / 2, topLeftCard.y + topLeftCard.height / 2, middleCard.x, middleTopY, "top-left");
        drawLineWithBend(topRightCard.x + topRightCard.width / 2, topRightCard.y + topRightCard.height / 2, middleCard.x + middleCard.width, middleTopY, "top-right");
        drawLineWithBend(bottomLeftCard.x + bottomLeftCard.width / 2, bottomLeftCard.y + bottomLeftCard.height / 2, middleCard.x, middleBottomY, "bottom-left");
        drawLineWithBend(bottomRightCard.x + bottomRightCard.width / 2, bottomRightCard.y + bottomRightCard.height / 2, middleCard.x + middleCard.width, middleBottomY, "bottom-right");

    }, []);



    return (
        <div className="relative w-[1100px] h-[1000px] flex flex-col justify-between">
            <canvas
                ref={canvasRef}
                className="absolute top-0 left-0 pointer-events-none"
            />
            <div className="flex justify-between">

                <SummaryCard
                    cardProfileImg="/images/profile.png"
                />

                <SummaryCard
                    cardProfileImg="/images/profile.png"
                />
            </div>
            <div className="flex justify-center">
                <MiddleSummaryCard />
            </div>
            <div className="flex justify-between">

                <SummaryCard
                    cardProfileImg="/images/profile.png"
                />

                <SummaryCard
                    cardProfileImg="/images/profile.png"
                />
            </div>
        </div>
    );
}

export default AutoGeneratedSummaryShowcase;